{
  "categories": [],
  "content": "An essential guide to OP Node Operators",
  "created": "2023-10-02T12:24:22.138Z",
  "guideType": "onboarding",
  "key": "op-node-operators-optimism-university-724",
  "name": "OP Node Operators",
  "publishStatus": "Live",
  "steps": [
    {
      "content": "### Who are Node Operators?\n\nNode operators are individuals or entities responsible for managing and maintaining the operation of nodes in a blockchain network. Their main role is to validate transactions and add them to the blockchain, which is a decentralized and distributed ledger that records all transactions on the network. By doing so, node operators help ensure the integrity of the network by making sure that all nodes have the same copy of the blockchain.\n\n### Benefits of having Node Operators\n\n#### Incentivized Participation\nNode operators receive cryptocurrency rewards for contributing computational power, ensuring active and secure network maintenance.\n\n#### Distributed Power\nMultiple node operators distribute control, enhancing network resilience against failures and attacks by reducing single points of failure.\n\n#### Enhanced Security\nNode operators validate transactions and maintain blockchain consistency, safeguarding the network from fraud and preserving its integrity.\n\n#### Transparency\nBlockchain data is open and accessible to all, enabling verification of transactions and data, fostering trust, and promoting accountability.\n\n#### Innovation\nOpen blockchain architecture encourages innovation and development as developers can create applications and services on top of the blockchain. ",
      "name": "Node Operators",
      "stepItems": [],
      "uuid": "1b5557e5-59f3-4288-bc23-6ff44fe1a42a"
    },
    {
      "content": "Deploying an OP node involves setting up and configuring different components, including the Rollup Node, Execution Engine, and Legacy Geth. Let's walk you through the process of deploying an OP node, step by step:\n\n### Minimum System Requirements\n\nBefore deploying an OP node, ensure that your system meets the minimum requirements. These requirements may vary depending on the network you are participating in. Make sure you have sufficient disk space available to store the network's data.\n\n### Initialization\n\nThe Execution Engine, also known as op-geth, requires initialization. The initialization process depends on the network you're deploying. For networks like OP Sepolia, you'll need to download the genesis file and initialize the data directory via geth init. For networks migrated from a legacy network, you'll download a preconfigured data directory and extract it.\n\n### Configuration\n\nop-geth accepts standard go-ethereum flags and additional flags specific to Optimism. You'll need to configure the authenticated RPC endpoint, JWT secret file, and other parameters based on your requirements. Consult the documentation for the network you are participating in to get the correct configuration details.\n\n### Rollup Node Configuration\n\nThe Rollup Node requires a configuration file called rollup.json or \"rollup config\" to specify network-specific genesis parameters. For official networks like OP Goerli, OP Sepolia, and OP Mainnet, the genesis config is hardcoded in the op-node software and can be specified via a --network flag. You can also manually specify a path to a rollup config using the --rollup.config flag.\n\n### Peer-to-Peer Network\n\nThe op-node participates in a peer-to-peer network to distribute blocks that have not been submitted to L1 yet. It automatically discovers and connects to peers using a set of bootnodes. You can also manually specify peers to connect to via the --p2p.static flag. Make sure to run the node with a static IP address accessible from the public Internet and open the required port on your firewall.\n\n### Legacy Geth (Optional)\n\nFor upgraded networks like OP Mainnet or OP Goerli, you'll need to run Legacy Geth to serve historical execution traces. Legacy Geth is our old l2geth binary running against a preconfigured data directory. Configure Legacy Geth by following the instructions for using a preconfigured data directory and specify the USING_OVM=true environment variable.\n\n### Troubleshooting:\n\nIf you encounter any issues during the deployment process, here are some common problems and their solutions:\n\n#### Authentication Error\nMake sure op-geth's authenticated RPC is enabled and the URL is correct.\n\n#### Permission Denied\nEnsure that the op-node has write access to the P2P discovery and peerstore directories.\n\n#### Wrong Chain Error\nVerify that the op-node's L1 URL, rollup config/--network parameter, and L2 URL are correct for the given network.",
      "name": "How to Deploy an OP Node?",
      "stepItems": [],
      "uuid": "805def7c-3c1e-4d3d-9878-6eb8a63a54f4"
    },
    {
      "content": "If you want to build your own node without relying on pre-built images, you can follow these instructions. These instructions are specifically generated for an Ubuntu 20.04 LTS system, but they should work with other systems as well. Building a node allows you to process and store the transaction history of either OP Mainnet or OP Sepolia.\n\n### Hardware Recommendations\n\nBefore starting the build process, it is important to consider the hardware requirements. For OP Mainnet, it is recommended to have a 2TB SSD, as the current archive node usage is approximately 1TB. On the other hand, for OP Sepolia, a 256GB SSD is sufficient, as the current full node usage is around 1.6GB and the archive node usage is approximately 5.6GB.\n\n### Software Requirements\n\n<table>\n<thead>\n  <tr>\n    <th>Software</th>\n    <th>Version</th>\n    <th>Installation command(s)</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td>Ubuntu</td>\n    <td>20.04 LTS</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>git, curl, jq, make, and zstd</td>\n    <td>OS default</td>\n    <td>sudo apt update,<br>sudo apt install -y git curl make jq zstd</td>\n  </tr>\n  <tr>\n    <td>Go</td>\n    <td>1.20</td>\n    <td>wget https://go.dev/dl/go1.20.linux-amd64.tar.gz,<br>tar xvzf go1.20.linux-amd64.tar.gz,<br>sudo cp go/bin/go /usr/bin/go,<br>sudo mv go /usr/lib,<br>echo export GOROOT=/usr/lib/go &gt;&gt; ~/.bashrc</td>\n  </tr>\n  <tr>\n    <td>Node</td>\n    <td>18.17.1</td>\n    <td>nvm install 18.17.1,<br>nvm use 18.17.1</td>\n  </tr>\n  <tr>\n    <td>pnpm</td>\n    <td>8.6.12</td>\n    <td>sudo npm install -g pnpm</td>\n  </tr>\n  <tr>\n    <td>Foundry</td>\n    <td>0.2.0</td>\n    <td>curl -L https://foundry.paradigm.xyz | bash,<br>. ~/.bashrc,<br>foundryup</td>\n  </tr>\n</tbody>\n</table>\n\n### Building the Optimism Monorepo\n\n1. Navigate to your working directory.\n2. Clone the [Optimism Monorepo](https://github.com/ethereum-optimism/optimism).\n3. Install required modules.\n4. Build the various packages inside of the Optimism Monorepo.\n\n### Building an op-geth\n\nTo build an op-geth node, you need to follow these steps:\n1. Navigate to your working directory.\n2. Clone [op-geth](https://github.com/ethereum-optimism/op-geth).\n3. Build op-geth.\n\n### Building a l2geth\n\nTo build a l2geth node, the process is similar but with a few variations:\n1. Navigate to your working directory.\n2. Clone [l2geth](https://github.com/ethereum-optimism/optimism-legacy)\n3. Build l2geth\n",
      "name": "Building a Node from Source",
      "stepItems": [],
      "uuid": "1c408170-a57a-4974-9aaa-85c255d5c9f0"
    },
    {
      "content": "By following these steps, you can successfully run OP Mainnet from source:\n\n### Getting the Data Directory\n\nTo run OP Mainnet from source, the first step is to download the data directory for op-geth. You can find the data directory for the [Bedrock](https://datadirs.optimism.io/mainnet-bedrock.tar.zst) version, which is 303GB in size. It is recommended to use a tool like [aria2](https://aria2.github.io/) to reduce the chance of the data directory being corrupted. Once downloaded, navigate to your op-geth directory and create a new directory called \"datadir\".\n\n### Setting up l2geth\n\nIf you want to use the optional l2geth archive node, you will need to download the data directory snapshot. This snapshot is much larger, around 2.9TB in size. Again, it is recommended to use a tool like [aria2](https://aria2.github.io/) to download the data directory to reduce the chance of corruption. Once downloaded, navigate to your l2geth directory and create a new directory called \"datadir\".\n\n### Creating a Shared Secret\n\nTo establish a connection between op-geth and op-node, you need to create a shared secret. Navigate to your op-geth directory and run the command \"openssl rand -hex 32 > jwt.txt\" to generate the shared secret.\n\n### Starting the Components\n\nIn the root of your working directory, create a new directory called \"scripts\". Inside the scripts directory, create two new files: \"run-l2geth.sh\" and \"run-op-geth.sh\". Insert the necessary code into these files, modifying the paths to the l2geth and op-geth directories. These scripts will be used to start the l2geth and op-geth components.\n\n### Configuring Archive Nodes\n\nIf you are using archive nodes, you will need to point op-geth at l2geth using the \"--rollup.historicalrpc\" flag. This flag enables the historical RPC endpoint, which is used to fetch historical execution data from Legacy Geth. Modify the code snippet in the run-op-geth.sh file to include the L1 RPC URL and set the L1KIND to the network provider you are using.\n\n### Synchronizing the Data Directory\n\nBefore you can use the node, you need to synchronize the data directory. The datadir provided by Optimism is not updated continuously, so synchronization is necessary. During the synchronization process, you will see log messages from op-node indicating its progress. This is normal and means that op-node is looking for a location in the batch queue. You can expect to see log messages from op-node and op-geth during the synchronization process.\n\n### Estimating Sync Time\n\nTo estimate how long the synchronization will take, you can use the [Foundry](https://book.getfoundry.sh/) script. Navigate to your scripts directory and create a new file called \"run-estimate.sh\". Run the script to get an estimated sync time based on the number of blocks synchronized in a minute.\n\n### Operations\n\nIt is recommended to start op-geth first and shut it down last. This will ensure that the web app behaves like any other installed app and can safely interact with other apps and your operating system. Once running, you can find the installed web app in your app lists and pin it to your home screen, start menus, or task bars.",
      "name": "Running OP Mainnet from Source",
      "stepItems": [],
      "uuid": "c257f5d1-69f0-4755-8c0a-f0d88499aa24"
    },
    {
      "content": "Running OP Testnet from source allows users to set up and initialize their own test network for Optimism's Ethereum Layer 2 solution. The following are the necessary steps to run OP Testnet from source:\n\n### OP Sepolia Initialization\n\nSince OP Sepolia is a non-migrated network, it requires initialization via a genesis file. To initialize the data directory, you'll need to download the genesis JSON and run the following command: curl -o <path to genesis JSON> -sL <URL to genesis JSON>. This will set up the necessary files for OP Sepolia.\n\n### Creating a Shared Secret\n\nTo create a shared secret between op-geth and op-node, navigate to your op-geth directory and run the command openssl rand -hex 32 > jwt.txt. This shared secret will ensure secure communication between the different components of the OP Testnet.\n\n### Starting the Different Components\n\nIn the root of your working directory, create a new directory called \"scripts\". Inside this directory, insert a snippet of code into the run-op-geth.sh file and modify the path to the op-geth directory. This will start the OP Geth component.\n\n### Estimating Synchronization Time\n\nBefore you can use the OP Testnet, you need to synchronize the data directory. The datadir provided by Optimism is not updated continuously, so synchronization is necessary. While the synchronization process is ongoing, you will receive log messages from op-node. To estimate how long the synchronization will take, you can use the Foundry script provided. Simply navigate to your scripts directory, create a new file called \"run-estimate.sh\", and run the command ./run-estimate.sh to get an estimate of the synchronization time.",
      "name": "Running OP Testnet from Source",
      "stepItems": [],
      "uuid": "19b4230a-5fa2-40f2-9f95-1acb99bb80f9"
    },
    {
      "content": "https://cryptoadventure.com/community/articles/what-are-crypto-node-operators/\n\nhttps://community.optimism.io/docs/developers/bedrock/node-operator-guide/\n\nhttps://community.optimism.io/docs/developers/nodes/intro/\n\nhttps://community.optimism.io/docs/developers/nodes/mainnet/\n\nhttps://community.optimism.io/docs/developers/nodes/testnet/\n",
      "name": "References",
      "stepItems": [],
      "uuid": "305f0242-549a-4969-8daf-af64331f1e5a"
    }
  ],
  "thumbnail": "https://d31h13bdjwgzxs.cloudfront.net/QmWy8EeMnxqx96VEPx2NBwzqtKxvMQqVVYvmPKgAYS2cUi",
  "uuid": "op-node-operators-optimism-university-724",
  "version": 1
}